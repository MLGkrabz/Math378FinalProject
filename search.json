[
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nimport duckdb\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "model.html#get-data",
    "href": "model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\n\n\nCode\n#con = duckdb.connect('my-db.duckdb')\n#df = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "model.html#define-model-and-fit",
    "href": "model.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model.html#get-some-information",
    "href": "model.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\n\nCode\n#from vetiver import VetiverModel\n#v = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n\n\n\n\nCode\n#from pins import board_folder\n#from vetiver import vetiver_pin_write\n#b = board_folder('data/model', allow_pickle_read=True)\n#p = vetiver_pin_write(b, v, versioned=True )\n\n\n\n\nCode\n#from pins import board_folder\n#from vetiver import vetiver_pin_write\n\n#model_board = board_folder(\n  #\"data/model\", \n  #allow_pickle_read = True\n#)\n#vetiver_pin_write(model_board, v)\n\n\n\n\nCode\n#from vetiver import VetiverAPI\n#app = VetiverAPI(v, check_prototype = True)\n\n\n\n\nCode\n#import duckdb\n#from palmerpenguins import penguins\n\n#con = duckdb.connect('my-db.duckdb')\n#df = penguins.load_penguins()\n#con.execute('CREATE TABLE penguins AS SELECT * FROM df')\n#con.close()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is a project assigned in order to test my ability to employ simple statistical models, and primarily my ability to practice independent learning. I have never made a quarto site such as this or used hardly any of the code that went into building this site. It may not look great, but it’s a big first step!"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\n  library(palmerpenguins)\n  library(dplyr)\n  library(dbplyr)\n  library(ggplot2)\n})\n\n#con &lt;- DBI::dbConnect(\n  #duckdb::duckdb(), \n  #dbdir = \"my-db.duckdb\"\n  #)\n#df &lt;- dplyr::tbl(con, \"penguins\")\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    avg_bill_length = mean(bill_length_mm, na.rm = TRUE),\n    avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE),\n    avg_body_mass = mean(body_mass_g, na.rm = TRUE)\n  ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\nspecies\nsex\navg_bill_length\navg_flipper_length\navg_body_mass\n\n\n\n\nAdelie\nfemale\n37.25753\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n192.4110\n4043.493\n\n\nAdelie\nNA\n37.84000\n185.6000\n3540.000\n\n\nChinstrap\nfemale\n46.57353\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n199.9118\n3938.971\n\n\nGentoo\nfemale\n45.56379\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n221.5410\n5484.836\n\n\nGentoo\nNA\n45.62500\n215.7500\n4587.500"
  },
  {
    "objectID": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nsuppressPackageStartupMessages({\n  library(palmerpenguins)\n  library(dplyr)\n  library(dbplyr)\n  library(ggplot2)\n})\n\n#con &lt;- DBI::dbConnect(\n  #duckdb::duckdb(), \n  #dbdir = \"my-db.duckdb\"\n  #)\n#df &lt;- dplyr::tbl(con, \"penguins\")\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    avg_bill_length = mean(bill_length_mm, na.rm = TRUE),\n    avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE),\n    avg_body_mass = mean(body_mass_g, na.rm = TRUE)\n  ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\nspecies\nsex\navg_bill_length\navg_flipper_length\navg_body_mass\n\n\n\n\nAdelie\nfemale\n37.25753\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n192.4110\n4043.493\n\n\nAdelie\nNA\n37.84000\n185.6000\n3540.000\n\n\nChinstrap\nfemale\n46.57353\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n199.9118\n3938.971\n\n\nGentoo\nfemale\n45.56379\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n221.5410\n5484.836\n\n\nGentoo\nNA\n45.62500\n215.7500\n4587.500"
  },
  {
    "objectID": "eda.html#penguin-size-vs-mass-by-species",
    "href": "eda.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  filter(!is.na(bill_length_mm), !is.na(body_mass_g), \n         is.finite(bill_length_mm), is.finite(body_mass_g)) %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nCode\n#library(DBI)\n#library(duckdb)\n#con &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")\n#DBI::dbWriteTable(con, \"penguins\", palmerpenguins::penguins)\n#DBI::dbDisconnect(con, shutdown = TRUE)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Math378FinalProject",
    "section": "",
    "text": "How I felt when I first reached Chapter 5\n\n\n\n\n\nWhen the indomitable human spirit kicked in\n\n\n\n\n\nMy final wind\n\n\n\n\n\nMy advice to any cadets distraught over this project in the future\n\n\n\n\n\nIn the vast silence of this frozen expanse, even the playful chatter of penguins whispers the profound truth: that in the immensity of the universe, our worries are as fleeting as snowflakes in the sea. Amid the pristine stillness of Antarctica, where penguins dance and the snow lies untouched, I see that striving for perfection is like pushing against the infinite—each commit to GitHub, a step towards understanding, yet a reminder of how much remains beyond our grasp."
  }
]